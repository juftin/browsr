[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
  {name = "Justin Flannery", email = "juftin@juftin.com"}
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy"
]
dependencies = [
  "art~=6.5",
  "click~=8.1.7",
  "pandas>2,<3",
  "rich>=14,<15",
  "rich-click~=1.8.9",
  "rich-pixels~=3.0.1",
  "textual>=5,<6",
  "textual-universal-directorytree~=1.6.0",
  "universal-pathlib~=0.2.6",
  "Pillow>=11.3.0",
  "PyMuPDF~=1.26.3",
  "pyperclip~=1.9.0"
]
description = "TUI File Browser App"
keywords = []
license = "MIT"
name = "browsr"
readme = "README.md"
requires-python = ">=3.9,<4.0"
version = "1.22.1"

[project.optional-dependencies]
all = [
  "pyarrow~=21.0.0",
  "textual-universal-directorytree[remote]~=1.6.0"
]
data = [
  "pyarrow~=21.0.0"
]
parquet = [
  "pyarrow~=21.0.0"
]
remote = [
  "textual-universal-directorytree[remote]~=1.6.0"
]

[project.scripts]
browsr = "browsr.__main__:browsr"

[project.urls]
Documentation = "https://github.com/juftin/browsr#readme"
Issues = "https://github.com/juftin/browsr/issues"
Source = "https://github.com/juftin/browsr"

[dependency-groups]
dev = [
  # Testing
  "pytest",
  "pytest-cov",
  "pytest-vcr~=1.0.2",
  "textual-dev~=1.4.0",
  "pytest-textual-snapshot",
  "pytest-asyncio",
  # Linting
  "mypy>=1.9.0",
  "ruff~=0.1.7"
]
docs = [
  "markdown-callouts",
  "markdown-exec",
  "mkdocs",
  "mkdocs-autorefs",
  "mkdocs-click",
  "mkdocs-gen-files",
  "mkdocs-literate-nav",
  "mkdocs-material",
  "mkdocs-section-index",
  "mkdocstrings",
  "mkdocstrings-python",
  "pymdown-extensions"
]

[tool.coverage.paths]
browsr = ["browsr", "*/browsr/browsr"]
tests = ["tests", "*/browsr/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:"
]

[tool.coverage.run]
branch = true
omit = ["browsr/__about__.py"]
parallel = true
source_pkgs = ["browsr", "tests"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_reexport = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = [
  "-v",
  "--cov=browsr",
  "--cov-report=term-missing",
  "--cov-report=xml:coverage.xml",
  "--junitxml=pytest.xml"
]

[tool.ruff]
ignore = [
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # Boolean-typed positional argument in function definition
  "FBT001",
  # Boolean default positional argument in function definition
  "FBT002",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Exception must not use a string literal, assign to variable first
  "EM101"
]
line-length = 88
select = [
  "A",  # flake8-builtins
  "ARG",  # flake8-unused-arguments
  "B",  # flake8-bugbear
  "C",  # mccabe
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle (Error)
  "EM",  # flake8-errmsg
  "F",  # Pyflakes
  "FBT",  # flake8-boolean-trap
  "I",  # isort
  "ICN",  # flake8-import-conventions
  "N",  # pep8-naming
  "PLC",  # Pylint (Convention message)
  "PLE",  # Pylint (Error message)
  "PLR",  # Pylint (Refactor message)
  "PLW",  # Pylint (Warning message)
  "Q",  # flake8-quotes
  "RUF",  # Ruff-specific rules
  "S",  # flake8-bandit
  "T",  # flake8-debugger (T10) and flake8-print (T20)
  "TID",  # flake8-tidy-imports
  "UP",  # pyupgrade
  "W",  # pycodestyle (Warning)
  "YTT"  # flake8-2020
]
target-version = "py38"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["browsr"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.pydocstyle]
convention = "numpy"
