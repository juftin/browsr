[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
  {name = "Justin Flannery", email = "juftin@juftin.com"}
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy"
]
dependencies = [
  "art~=5.7",
  "click~=8.1.3",
  "pandas~=2.0.3; python_version < '3.9'",
  "pandas~=2.1.1; python_version > '3.8'",
  "numpy~=1.24.2; python_version < '3.9'",
  "numpy~=1.26.0; python_version > '3.8'",
  "rich~=13.5.2",
  "rich-click~=1.5.2",
  "rich-pixels~=2.1.1",
  "textual==0.39.0",
  "textual-universal-directorytree~=1.0.2",
  "Pillow>=9.1.0",
  "PyMuPDF~=1.22.3"
]
description = "🗂️ a pleasant file explorer in your terminal supporting remote and local filesystems"
dynamic = ["version"]
keywords = []
license = "MIT"
name = "browsr"
readme = "README.md"
requires-python = ">=3.8,<4.0"

[project.optional-dependencies]
all = [
  "pyarrow~=10.0.0",
  "textual-universal-directorytree[remote]~=1.0.2"
]
parquet = [
  "pyarrow~=10.0.0"
]
remote = [
  "textual-universal-directorytree[remote]~=1.0.2"
]

[project.scripts]
browsr = "browsr.__main__:browsr"

[project.urls]
Documentation = "https://github.com/juftin/browsr#readme"
Issues = "https://github.com/juftin/browsr/issues"
Source = "https://github.com/juftin/browsr"

[tool.black]
line-length = 100
skip-string-normalization = true
target-version = ["py38"]

[tool.coverage.paths]
browsr = ["browsr", "*/browsr/browsr"]
tests = ["tests", "*/browsr/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:"
]

[tool.coverage.run]
branch = true
omit = [
  "browsr/__about__.py"
]
parallel = true
source_pkgs = ["browsr", "tests"]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "textual-dev~=1.0.1",
  "pytest-cov~=4.0.0",
  "pytest-mock~=3.10.0",
  "pytest-vcr~=1.0.2"
]
path = ".venv"
post-install-commands = [
  "pre-commit install"
]
pre-install-commands = [
  "pip install -q -r requirements.txt --no-deps"
]
python = "3.11"
type = "virtual"

[tool.hatch.envs.default.env-vars]
GITHUB_TOKEN = "{env:GITHUB_TOKEN:placeholder}"

[tool.hatch.envs.default.scripts]
cov = [
  "test-cov",
  "cov-report"
]
cov-report = [
  "- coverage combine",
  "coverage report -m"
]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs~=1.5.2",
  "mkdocs-material~=9.2.3",
  "markdown-exec[ansi]~=1.6.0",
  "mkdocs-click~=0.8.0",
  "mkdocstrings[python]~=0.22.0",
  "mkdocs-gen-files~=0.5.0",
  "mkdocs-literate-nav~=0.6.0",
  "mkdocs-section-index~=0.3.5"
]

[tool.hatch.envs.docs.scripts]
build = ["mkdocs build --clean --strict"]
deploy = ["mkdocs gh-deploy {args:}"]
serve = ["mkdocs serve --dev-addr localhost:8080 --livereload"]

[tool.hatch.envs.gen]
dependencies = [
  "pip-tools~=7.1.0"
]
detached = false

[tool.hatch.envs.gen.scripts]
release = [
  "npm install --prefix .github/semantic_release/",
  "npx --prefix .github/semantic_release/ semantic-release {args:}"
]
reqs = "pip-compile {args:} --generate-hashes --output-file requirements.txt --all-extras"
reqs-update = "pip-compile {args:} --upgrade --generate-hashes --output-file requirements.txt --all-extras"

[tool.hatch.envs.lint]
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
  "pandas-stubs~=2.0.0.230412"
]
detached = true

[tool.hatch.envs.lint.scripts]
all = [
  "style",
  "typing"
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style"
]
precommit = [
  "pre-commit run --all-files"
]
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}"
]
typing = "mypy --install-types --non-interactive {args:browsr tests}"

[tool.hatch.version]
path = "browsr/__about__.py"

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_reexport = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.ruff]
ignore = [
  # Using `.strip()` with multi-character strings is misleading the reader
  "B005",
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Boolean-typed positional argument in function definition
  "FBT001",
  # Boolean default positional argument in function definition
  "FBT002",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915"
]
line-length = 100
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
  "C90"
]
target-version = "py38"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["browsr"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.pydocstyle]
convention = "numpy"
